// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –º—É—Ç–Ω–æ—Å—Ç–∏
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –≤—ã—Å–æ–∫–∏–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –º—É—Ç–Ω–æ—Å—Ç–∏
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞

const fs = require('fs');
const path = require('path');

const flowsPath = path.join(__dirname, '.node-red', 'flows.json');

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º—É—Ç–Ω–æ—Å—Ç–∏...');

try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(flowsPath)) {
        console.log('‚ÑπÔ∏è  flows.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        process.exit(0);
    }
    
    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π flows.json
    const flowsContent = fs.readFileSync(flowsPath, 'utf8');
    const flows = JSON.parse(flowsContent);
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π flow —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const targetFlow = flows.find(node => 
        node.type === 'function' && 
        node.name === 'Setup Enhanced Device States & Configs'
    );
    
    if (!targetFlow) {
        console.log('‚ÑπÔ∏è  –£–∑–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        process.exit(0);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    let funcCode = targetFlow.func;
    let needsUpdate = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è turbidity –Ω–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ
    if (funcCode.includes('turbidity: 1.5') || funcCode.includes('turbidity: 3.0') || funcCode.includes('turbidity: 7.0')) {
        needsUpdate = true;
        
        funcCode = funcCode.replace(
            /baseline: { ph: 7\.2, temp: 20, tds: 300, turbidity: 1\.5 }/g,
            'baseline: { ph: 7.2, temp: 20, tds: 300, turbidity: 0.8 }'
        );
        
        funcCode = funcCode.replace(
            /current: { ph: 7\.2, temp: 20, tds: 300, turbidity: 1\.5, wqi: 0/g,
            'current: { ph: 7.2, temp: 20, tds: 300, turbidity: 0.8, wqi: 0'
        );
        
        funcCode = funcCode.replace(
            /baseline: { ph: 6\.8, temp: 23, tds: 450, turbidity: 3\.0 }/g,
            'baseline: { ph: 6.8, temp: 23, tds: 450, turbidity: 1.2 }'
        );
        
        funcCode = funcCode.replace(
            /current: { ph: 6\.8, temp: 23, tds: 450, turbidity: 3\.0, wqi: 0/g,
            'current: { ph: 6.8, temp: 23, tds: 450, turbidity: 1.2, wqi: 0'
        );
        
        funcCode = funcCode.replace(
            /baseline: { ph: 5\.5, temp: 28, tds: 600, turbidity: 7\.0 }/g,
            'baseline: { ph: 5.5, temp: 28, tds: 600, turbidity: 2.5 }'
        );
        
        funcCode = funcCode.replace(
            /current: { ph: 5\.5, temp: 28, tds: 600, turbidity: 7\.0, wqi: 0/g,
            'current: { ph: 5.5, temp: 28, tds: 600, turbidity: 2.5, wqi: 0'
        );
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ SmartEnhancedSimulation –¥–ª—è –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º—É—Ç–Ω–æ—Å—Ç–∏
        funcCode = funcCode.replace(
            /turbidity: this\.randomInRange\(0\.1, 25\)/g,
            'turbidity: this.randomInRange(0.1, 5.0)'
        );
    }
    
    if (needsUpdate) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        targetFlow.func = funcCode;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π flows.json
        fs.writeFileSync(flowsPath, JSON.stringify(flows, null, 2));
        
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º—É—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:');
        console.log('  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 111001: turbidity 1.5 ‚Üí 0.8');
        console.log('  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 222002: turbidity 3.0 ‚Üí 1.2');
        console.log('  - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 333003: turbidity 7.0 ‚Üí 2.5');
        console.log('  - –î–∏–∞–ø–∞–∑–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 0.1-25 ‚Üí 0.1-5.0');
    } else {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º—É—Ç–Ω–æ—Å—Ç–∏ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞');
    }
    
} catch (error) {
    console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ flows.json:', error.message);
    console.log('‚ÑπÔ∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...');
}
