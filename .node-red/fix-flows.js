const fs = require('fs');

// Read flows.json
const flows = JSON.parse(fs.readFileSync('./flows.json', 'utf8'));

// Find the initialization function node
const initNode = flows.find(node => node.id === 'func-initialize-devices');

if (initNode) {
    // Create new function code with inline Enhanced simulation
    initNode.func = `// –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const simulationStartTime = Date.now();
flow.set('simulation_start_time', simulationStartTime);

// –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É WQI
function calculateParameterScores(params) {
    let partial = {};
    let totalWQI = 0;
    
    // pH Score
    if (params.ph >= 7.0 && params.ph <= 7.6) partial.ph = 25;
    else if (params.ph >= 6.5 && params.ph <= 8.5) partial.ph = 18;
    else if (params.ph >= 6.0 && params.ph <= 9.0) partial.ph = 10;
    else partial.ph = 5;
    totalWQI += partial.ph;
    
    // Temperature Score
    if (params.temp >= 18 && params.temp <= 22) partial.temp = 25;
    else if (params.temp >= 15 && params.temp <= 25) partial.temp = 18;
    else if (params.temp >= 10 && params.temp <= 30) partial.temp = 10;
    else partial.temp = 5;
    totalWQI += partial.temp;
    
    // TDS Score
    if (params.tds <= 300) partial.tds = 25;
    else if (params.tds <= 500) partial.tds = 18;
    else if (params.tds <= 800) partial.tds = 10;
    else partial.tds = 5;
    totalWQI += partial.tds;
    
    // Turbidity Score
    if (params.turbidity <= 1) partial.turbidity = 25;
    else if (params.turbidity <= 5) partial.turbidity = 18;
    else if (params.turbidity <= 10) partial.turbidity = 10;
    else partial.turbidity = 5;
    totalWQI += partial.turbidity;
    
    return { totalWQI: Math.max(0, Math.min(100, totalWQI)), partial: partial };
}

// –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
function formatOperatingTime(startTime) {
    const now = Date.now();
    const diffMs = now - startTime;
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
    return \`\${hours} –≥–æ–¥ \${minutes} —Ö–≤\`;
}

// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
const initialDeviceConfigs = {
    "111001": {
        id: '111001',
        name: '–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—Ç—á–∏–∫',
        customName: '–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—Ç—á–∏–∫',
        serverConfig: {
            deviceId: '111001',
            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'
        },
        isOnline: true,
        location: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è',
        baseline: { ph: 7.2, temp: 20, tds: 300, turbidity: 1.5 },
        current: { ph: 7.2, temp: 20, tds: 300, turbidity: 1.5, wqi: 0, lastUpdate: Date.now() },
        technical: {
            powerSource: "–í—ñ–¥ –º–µ—Ä–µ–∂—ñ",
            powerType: "mains",
            batteryLevel: 100,
            startTime: simulationStartTime,
            lastCalibration: new Date('2025-05-15T10:30:00Z').getTime(),
            calibrationInterval: 30 * 24 * 60 * 60 * 1000,
            sensorStatus: "–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω",
            connectionStatus: "–°—Ç–∞–±—ñ–ª—å–Ω–µ",
            signalStrength: -35,
            firmwareVersion: "v2.1.3",
            hardwareVersion: "v1.4",
            sensorHealth: {
                ph: "online",
                temperature: "online",
                tds: "online",
                turbidity: "online"
            },
            alerts: []
        }
    },
    "222002": {
        id: '222002',
        name: '–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–æ–¥—É–ª—å',
        customName: '–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–æ–¥—É–ª—å',
        serverConfig: {
            deviceId: '222002',
            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'
        },
        isOnline: true,
        location: '–†–µ–∑–µ—Ä–≤',
        baseline: { ph: 6.8, temp: 23, tds: 450, turbidity: 3.0 },
        current: { ph: 6.8, temp: 23, tds: 450, turbidity: 3.0, wqi: 0, lastUpdate: Date.now() },
        technical: {
            powerSource: "–í—ñ–¥ –±–∞—Ç–∞—Ä–µ—ó",
            powerType: "battery",
            batteryLevel: 78,
            startTime: simulationStartTime,
            lastCalibration: new Date('2025-04-20T14:15:00Z').getTime(),
            calibrationInterval: 30 * 24 * 60 * 60 * 1000,
            sensorStatus: "–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω",
            connectionStatus: "–°—Ç–∞–±—ñ–ª—å–Ω–µ",
            signalStrength: -52,
            firmwareVersion: "v2.0.8",
            hardwareVersion: "v1.3",
            sensorHealth: {
                ph: "online",
                temperature: "online",
                tds: "online",
                turbidity: "online"
            },
            alerts: [
                {
                    id: "alert_battery_low",
                    type: "battery_warning",
                    severity: "warning",
                    message: "–†—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó –Ω–∏–∂—á–µ 80%",
                    timestamp: Date.now() - 3600000,
                    acknowledged: false
                }
            ]
        }
    },
    "333003": {
        id: '333003',
        name: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–µ–Ω–¥',
        customName: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–µ–Ω–¥',
        serverConfig: {
            deviceId: '333003',
            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'
        },
        isOnline: false,
        location: '–¢–µ—Å—Ç–æ–≤–∞ –∑–æ–Ω–∞',
        baseline: { ph: 5.5, temp: 28, tds: 600, turbidity: 7.0 },
        current: { ph: 5.5, temp: 28, tds: 600, turbidity: 7.0, wqi: 0, lastUpdate: Date.now() },
        technical: {
            powerSource: "–°–æ–Ω—è—á–Ω–∞ –±–∞—Ç–∞—Ä–µ—è",
            powerType: "solar",
            batteryLevel: 92,
            startTime: simulationStartTime,
            lastCalibration: new Date('2025-06-01T09:00:00Z').getTime(),
            calibrationInterval: 30 * 24 * 60 * 60 * 1000,
            sensorStatus: "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –¥–∞—Ç—á–∏–∫ pH –ø–æ—Ç—Ä–µ–±—É—î –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è",
            connectionStatus: "–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–µ",
            signalStrength: -67,
            firmwareVersion: "v1.9.2",
            hardwareVersion: "v1.2",
            sensorHealth: {
                ph: "drift_detected",
                temperature: "online",
                tds: "online",
                turbidity: "online"
            },
            alerts: [
                {
                    id: "alert_ph_drift",
                    type: "sensor_drift",
                    severity: "warning",
                    message: "–í–∏—è–≤–ª–µ–Ω–æ –¥—Ä–µ–π—Ñ –¥–∞—Ç—á–∏–∫–∞ pH",
                    parameter: "pH",
                    timestamp: Date.now() - 1800000,
                    acknowledged: false
                }
            ]
        }
    }
};

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç flow
flow.set('calculateWQI', calculateParameterScores);
flow.set('formatOperatingTime', formatOperatingTime);

// Inline Enhanced Simulation (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
class SimpleEnhancedSimulation {
    constructor(initialDeviceConfigs, calculateWQI, formatOperatingTime) {
        this.devices = JSON.parse(JSON.stringify(initialDeviceConfigs));
        this.calculateWQI = calculateWQI;
        this.formatOperatingTime = formatOperatingTime;
        this.simulationStartTime = Date.now();
        
        node.log('üåä Simple Enhanced Simulation —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }
    
    generateDeviceData(device, timestamp) {
        const baseline = device.baseline;
        const timeMs = timestamp - this.simulationStartTime;
        const timeMins = timeMs / (1000 * 60);
        
        // –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ—ó –∑ —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏
        const phVariation = Math.sin(timeMins * 0.1) * 0.3;
        const tempVariation = Math.cos(timeMins * 0.08) * 1.2;
        const tdsVariation = Math.sin(timeMins * 0.12) * 50;
        const turbidityVariation = Math.cos(timeMins * 0.15) * 0.8;
        
        // –î–æ–¥–∞—î–º–æ —à—É–º
        const noise = () => (Math.random() - 0.5) * 0.1;
        
        return {
            ph: Math.max(0, Math.min(14, baseline.ph + phVariation + noise())),
            temp: Math.max(0, Math.min(40, baseline.temp + tempVariation + noise() * 2)),
            tds: Math.max(0, Math.min(2000, baseline.tds + tdsVariation + noise() * 10)),
            turbidity: Math.max(0, Math.min(50, baseline.turbidity + turbidityVariation + noise()))
        };
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Enhanced simulation
try {
    const enhancedSim = new SimpleEnhancedSimulation(
        initialDeviceConfigs,
        calculateParameterScores,
        formatOperatingTime
    );
    
    flow.set('enhancedSimulation', enhancedSim);
    node.log('‚úÖ Enhanced simulation (inline) –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
} catch (error) {
    node.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Enhanced simulation: ' + error.message);
}
    
// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ –±–∞–∑–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
const devices = {};
for (const deviceId in initialDeviceConfigs) {
    if (initialDeviceConfigs.hasOwnProperty(deviceId)) {
        const config = initialDeviceConfigs[deviceId];
        devices[deviceId] = {
            ...config,
            lastUpdate: new Date(config.current.lastUpdate).toLocaleString('uk-UA')
        };
        
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ WQI
        const scores = calculateParameterScores(config.current);
        devices[deviceId].current.wqi = scores.totalWQI;
        devices[deviceId].current.partial_scores = scores.partial;
        
        if (config.technical && config.technical.startTime) {
            devices[deviceId].technical.operatingTimeFormatted = formatOperatingTime(config.technical.startTime);
        }
    }
}
    
flow.set('sim_devices', devices);
    
node.status({ 
    fill: "green", 
    shape: "dot", 
    text: \`‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞: \${Object.keys(devices).length} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤\` 
});
    
node.log(\`‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ \${Object.keys(devices).length} –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏\`);

return msg;`;

    // Write the updated flows back
    fs.writeFileSync('./flows.json', JSON.stringify(flows, null, 2));
    console.log('‚úÖ flows.json –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ inline Enhanced simulation');
} else {
    console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó');
}
