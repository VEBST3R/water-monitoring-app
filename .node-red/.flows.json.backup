[
  {
    "id": "8cb51d754613f073",
    "type": "tab",
    "label": "Water Quality Monitoring Simulation",
    "disabled": false,
    "info": "–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó",
    "env": []
  },
  {
    "id": "init-simulation",
    "type": "inject",
    "z": "8cb51d754613f073",
    "name": "Initialize/Reset Simulation",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "true",
    "payloadType": "bool",
    "x": 600,
    "y": 400,
    "wires": [
      [
        "func-initialize-devices"
      ]
    ]
  },
  {
    "id": "func-initialize-devices",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "Setup Enhanced Device States & Configs",
    "func": "// –†–æ–∑—à–∏—Ä–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\nconst simulationStartTime = Date.now();\nflow.set('simulation_start_time', simulationStartTime);\n\n// –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É WQI\nfunction calculateParameterScores(params) {\n    let partial = {};\n    let totalWQI = 0;\n    \n    // pH Score\n    if (params.ph >= 7.0 && params.ph <= 7.6) partial.ph = 25;\n    else if (params.ph >= 6.5 && params.ph <= 8.5) partial.ph = 18;\n    else if (params.ph >= 6.0 && params.ph <= 9.0) partial.ph = 10;\n    else partial.ph = 5;\n    totalWQI += partial.ph;\n    \n    // Temperature Score\n    if (params.temp >= 18 && params.temp <= 22) partial.temp = 25;\n    else if (params.temp >= 15 && params.temp <= 25) partial.temp = 18;\n    else if (params.temp >= 10 && params.temp <= 30) partial.temp = 10;\n    else partial.temp = 5;\n    totalWQI += partial.temp;\n    \n    // TDS Score\n    if (params.tds <= 300) partial.tds = 25;\n    else if (params.tds <= 500) partial.tds = 18;\n    else if (params.tds <= 800) partial.tds = 10;\n    else partial.tds = 5;\n    totalWQI += partial.tds;\n    \n    // Turbidity Score\n    if (params.turbidity <= 1) partial.turbidity = 25;\n    else if (params.turbidity <= 5) partial.turbidity = 18;\n    else if (params.turbidity <= 10) partial.turbidity = 10;\n    else partial.turbidity = 5;\n    totalWQI += partial.turbidity;\n    \n    return { totalWQI: Math.max(0, Math.min(100, totalWQI)), partial: partial };\n}\n\n// –§—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏\nfunction formatOperatingTime(startTime) {\n    const now = Date.now();\n    const diffMs = now - startTime;\n    const hours = Math.floor(diffMs / (1000 * 60 * 60));\n    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours} –≥–æ–¥ ${minutes} —Ö–≤`;\n}\n\n// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó\nconst initialDeviceConfigs = {\n    \"111001\": {\n        id: '111001',\n        name: '–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—Ç—á–∏–∫',\n        customName: '–ì–æ–ª–æ–≤–Ω–∏–π –¥–∞—Ç—á–∏–∫',\n        serverConfig: {\n            deviceId: '111001',\n            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'\n        },\n        isOnline: true,\n        location: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è',\n        baseline: { ph: 7.2, temp: 20, tds: 300, turbidity: 1.5 },\n        current: { ph: 7.2, temp: 20, tds: 300, turbidity: 1.5, wqi: 0, lastUpdate: Date.now() },\n        technical: {\n            powerSource: \"–í—ñ–¥ –º–µ—Ä–µ–∂—ñ\",\n            powerType: \"mains\",\n            batteryLevel: 100,\n            startTime: simulationStartTime,\n            lastCalibration: new Date('2025-05-15T10:30:00Z').getTime(),\n            calibrationInterval: 30 * 24 * 60 * 60 * 1000,\n            sensorStatus: \"–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω\",\n            connectionStatus: \"–°—Ç–∞–±—ñ–ª—å–Ω–µ\",\n            signalStrength: -35,\n            firmwareVersion: \"v2.1.3\",\n            hardwareVersion: \"v1.4\",\n            sensorHealth: {\n                ph: \"online\",\n                temperature: \"online\",\n                tds: \"online\",\n                turbidity: \"online\"\n            },\n            alerts: []\n        }\n    },\n    \"222002\": {\n        id: '222002',\n        name: '–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–æ–¥—É–ª—å',\n        customName: '–†–µ–∑–µ—Ä–≤–Ω–∏–π –º–æ–¥—É–ª—å',\n        serverConfig: {\n            deviceId: '222002',\n            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'\n        },\n        isOnline: true,\n        location: '–†–µ–∑–µ—Ä–≤',\n        baseline: { ph: 6.8, temp: 23, tds: 450, turbidity: 3.0 },\n        current: { ph: 6.8, temp: 23, tds: 450, turbidity: 3.0, wqi: 0, lastUpdate: Date.now() },\n        technical: {\n            powerSource: \"–í—ñ–¥ –±–∞—Ç–∞—Ä–µ—ó\",\n            powerType: \"battery\",\n            batteryLevel: 78,\n            startTime: simulationStartTime,\n            lastCalibration: new Date('2025-04-20T14:15:00Z').getTime(),\n            calibrationInterval: 30 * 24 * 60 * 60 * 1000,\n            sensorStatus: \"–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω\",\n            connectionStatus: \"–°—Ç–∞–±—ñ–ª—å–Ω–µ\",\n            signalStrength: -52,\n            firmwareVersion: \"v2.0.8\",\n            hardwareVersion: \"v1.3\",\n            sensorHealth: {\n                ph: \"online\",\n                temperature: \"online\",\n                tds: \"online\",\n                turbidity: \"online\"\n            },\n            alerts: [\n                {\n                    id: \"alert_battery_low\",\n                    type: \"battery_warning\",\n                    severity: \"warning\",\n                    message: \"–†—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó –Ω–∏–∂—á–µ 80%\",\n                    timestamp: Date.now() - 3600000,\n                    acknowledged: false\n                }\n            ]\n        }\n    },\n    \"333003\": {\n        id: '333003',\n        name: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–µ–Ω–¥',\n        customName: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ç–µ–Ω–¥',\n        serverConfig: {\n            deviceId: '333003',\n            serverName: '–õ–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (Node-RED)'\n        },\n        isOnline: false,\n        location: '–¢–µ—Å—Ç–æ–≤–∞ –∑–æ–Ω–∞',\n        baseline: { ph: 5.5, temp: 28, tds: 600, turbidity: 7.0 },\n        current: { ph: 5.5, temp: 28, tds: 600, turbidity: 7.0, wqi: 0, lastUpdate: Date.now() },\n        technical: {\n            powerSource: \"–°–æ–Ω—è—á–Ω–∞ –±–∞—Ç–∞—Ä–µ—è\",\n            powerType: \"solar\",\n            batteryLevel: 92,\n            startTime: simulationStartTime,\n            lastCalibration: new Date('2025-06-01T09:00:00Z').getTime(),\n            calibrationInterval: 30 * 24 * 60 * 60 * 1000,\n            sensorStatus: \"–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –¥–∞—Ç—á–∏–∫ pH –ø–æ—Ç—Ä–µ–±—É—î –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\",\n            connectionStatus: \"–ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–µ\",\n            signalStrength: -67,\n            firmwareVersion: \"v1.9.2\",\n            hardwareVersion: \"v1.2\",\n            sensorHealth: {\n                ph: \"drift_detected\",\n                temperature: \"online\",\n                tds: \"online\",\n                turbidity: \"online\"\n            },\n            alerts: [\n                {\n                    id: \"alert_ph_drift\",\n                    type: \"sensor_drift\",\n                    severity: \"warning\",\n                    message: \"–í–∏—è–≤–ª–µ–Ω–æ –¥—Ä–µ–π—Ñ –¥–∞—Ç—á–∏–∫–∞ pH\",\n                    parameter: \"pH\",\n                    timestamp: Date.now() - 1800000,\n                    acknowledged: false\n                }\n            ]\n        }\n    }\n};\n\n// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç flow\nflow.set('calculateWQI', calculateParameterScores);\nflow.set('formatOperatingTime', formatOperatingTime);\n\n// Inline Enhanced Simulation (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)\nclass SimpleEnhancedSimulation {\n    constructor(initialDeviceConfigs, calculateWQI, formatOperatingTime) {\n        this.devices = JSON.parse(JSON.stringify(initialDeviceConfigs));\n        this.calculateWQI = calculateWQI;\n        this.formatOperatingTime = formatOperatingTime;\n        this.simulationStartTime = Date.now();\n        \n        node.log('üåä Simple Enhanced Simulation —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');\n    }\n    \n    generateDeviceData(device, timestamp) {\n        const baseline = device.baseline;\n        const timeMs = timestamp - this.simulationStartTime;\n        const timeMins = timeMs / (1000 * 60);\n        \n        // –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ—ó –∑ —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏\n        const phVariation = Math.sin(timeMins * 0.1) * 0.3;\n        const tempVariation = Math.cos(timeMins * 0.08) * 1.2;\n        const tdsVariation = Math.sin(timeMins * 0.12) * 50;\n        const turbidityVariation = Math.cos(timeMins * 0.15) * 0.8;\n        \n        // –î–æ–¥–∞—î–º–æ —à—É–º\n        const noise = () => (Math.random() - 0.5) * 0.1;\n        \n        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º\n        const ph = Math.max(0, Math.min(14, baseline.ph + phVariation + noise()));\n        const temp = Math.max(0, Math.min(40, baseline.temp + tempVariation + noise() * 2));\n        const tds = Math.max(0, Math.min(2000, baseline.tds + tdsVariation + noise() * 10));\n        const turbidity = Math.max(0, Math.min(50, baseline.turbidity + turbidityVariation + noise()));\n        \n        return {\n            ph: Math.round(ph * 100) / 100,              // 2 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏\n            temp: Math.round(temp * 10) / 10,            // 1 –∑–Ω–∞–∫ –ø—ñ—Å–ª—è –∫–æ–º–∏  \n            tds: Math.round(tds),                        // —Ü—ñ–ª—ñ —á–∏—Å–ª–∞\n            turbidity: Math.round(turbidity * 10) / 10   // 1 –∑–Ω–∞–∫ –ø—ñ—Å–ª—è –∫–æ–º–∏\n        };\n    }\n}\n\n// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Enhanced simulation\ntry {\n    const enhancedSim = new SimpleEnhancedSimulation(\n        initialDeviceConfigs,\n        calculateParameterScores,\n        formatOperatingTime\n    );\n    \n    flow.set('enhancedSimulation', enhancedSim);\n    node.log('‚úÖ Enhanced simulation (inline) –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');\n} catch (error) {\n    node.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Enhanced simulation: ' + error.message);\n}\n    \n// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ –±–∞–∑–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏\nconst devices = {};\nfor (const deviceId in initialDeviceConfigs) {\n    if (initialDeviceConfigs.hasOwnProperty(deviceId)) {\n        const config = initialDeviceConfigs[deviceId];\n        devices[deviceId] = {\n            ...config,\n            lastUpdate: new Date(config.current.lastUpdate).toLocaleString('uk-UA')\n        };\n        \n        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ WQI\n        const scores = calculateParameterScores(config.current);\n        devices[deviceId].current.wqi = scores.totalWQI;\n        devices[deviceId].current.partial_scores = scores.partial;\n        \n        if (config.technical && config.technical.startTime) {\n            devices[deviceId].technical.operatingTimeFormatted = formatOperatingTime(config.technical.startTime);\n        }\n    }\n}\n    \nflow.set('sim_devices', devices);\n    \nnode.status({ \n    fill: \"green\", \n    shape: \"dot\", \n    text: `‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞: ${Object.keys(devices).length} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤` \n});\n    \nnode.log(`‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ ${Object.keys(devices).length} –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏`);\n\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 400,
    "wires": [
      [
        "debug-init"
      ]
    ]
  },
  {
    "id": "inject-update-tick",
    "type": "inject",
    "z": "8cb51d754613f073",
    "name": "Update Interval (5s)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "5",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 590,
    "y": 480,
    "wires": [
      [
        "func-update-all-device-states"
      ]
    ]
  },
  {
    "id": "func-update-all-device-states",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "Enhanced Device States Update",
    "func": "let devices = flow.get('sim_devices') || {};\nconst calculateWQI = flow.get('calculateWQI');\nconst formatOperatingTime = flow.get('formatOperatingTime');\nconst enhancedSim = flow.get('enhancedSimulation');\n\nif (!calculateWQI) {\n    node.error(\"calculateWQI function not found in flow context\");\n    return null;\n}\n\nif (!enhancedSim) {\n    node.warn(\"Enhanced simulation not available, using basic simulation\");\n    // Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó\n    for (const deviceId in devices) {\n        if (devices.hasOwnProperty(deviceId)) {\n            let device = devices[deviceId];\n            let baseline = device.baseline;\n            let current = device.current;\n            let technical = device.technical;\n\n            // –°—Ç–∞—Ä–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ–π\n            current.ph += (baseline.ph - current.ph) * 0.1 + (Math.random() - 0.5) * 0.1;\n            current.ph = parseFloat(Math.max(0, Math.min(14, current.ph)).toFixed(2));\n\n            current.temp += (baseline.temp - current.temp) * 0.1 + (Math.random() - 0.5) * 0.5;\n            current.temp = parseFloat(Math.max(0, Math.min(40, current.temp)).toFixed(1));\n\n            current.tds += (baseline.tds - current.tds) * 0.1 + (Math.random() - 0.5) * 20;\n            current.tds = Math.max(0, Math.min(2000, Math.floor(current.tds)));\n\n            current.turbidity += (baseline.turbidity - current.turbidity) * 0.1 + (Math.random() - 0.5) * 0.3;\n            current.turbidity = parseFloat(Math.max(0, Math.min(50, current.turbidity)).toFixed(1));\n            \n            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è WQI\n            const scores = calculateWQI(current);\n            current.wqi = scores.totalWQI;\n            current.partial_scores = scores.partial;\n            current.lastUpdate = Date.now();\n            \n            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏\n            if (formatOperatingTime && technical.startTime) {\n                technical.operatingTime = formatOperatingTime(technical.startTime);\n            }\n            \n            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É —Ç–∞ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n            device.isOnline = technical.connectionStatus !== \"–í—ñ–¥–∫–ª—é—á–µ–Ω–æ\";\n            device.lastUpdate = new Date(current.lastUpdate).toLocaleString('uk-UA');\n        }\n    }\n} else {\n    // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó\n    const timestamp = Date.now();\n    \n    for (const deviceId in devices) {\n        if (devices.hasOwnProperty(deviceId)) {\n            let device = devices[deviceId];\n            let technical = device.technical;\n\n            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó\n            try {\n                const newCurrent = enhancedSim.generateDeviceData(device, timestamp);\n                device.current = {\n                    ...newCurrent,\n                    lastUpdate: timestamp\n                };\n                \n                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è WQI\n                const scores = calculateWQI(device.current);\n                device.current.wqi = scores.totalWQI;\n                device.current.partial_scores = scores.partial;\n                \n                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏\n                if (formatOperatingTime && technical.startTime) {\n                    technical.operatingTime = formatOperatingTime(technical.startTime);\n                }\n                \n                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É —Ç–∞ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\n                device.isOnline = technical.connectionStatus !== \"–í—ñ–¥–∫–ª—é—á–µ–Ω–æ\";\n                device.lastUpdate = new Date(device.current.lastUpdate).toLocaleString('uk-UA');\n                \n                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–¥—ñ–π\n                if (device.activeEvents && device.activeEvents.length > 0) {\n                    const activeEventTypes = device.activeEvents.map(e => e.type).join(', ');\n                    node.log(`üéØ –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}: –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–¥—ñ—ó - ${activeEventTypes}`);\n                }\n                \n            } catch (error) {\n                node.error(`–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é ${deviceId}: ${error.message}`);\n            }\n        }\n    }\n}\n\nflow.set('sim_devices', devices);\n\nnode.status({ \n    fill: \"blue\", \n    shape: \"dot\", \n    text: `üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()} (Enhanced)` \n});\n\n// –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó\nreturn { payload: { updated: Object.keys(devices).length, timestamp: Date.now(), enhanced: !!enhancedSim } };",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 480,
    "wires": [
      [
        "debug-update"
      ]
    ]
  },
  {
    "id": "inject-save-history-manual",
    "type": "inject",
    "z": "8cb51d754613f073",
    "name": "üìä –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ó–ê–†–ê–ó",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "manual_trigger",
    "payloadType": "str",
    "x": 620,
    "y": 1000,
    "wires": [
      [
        "func-prepare-history-save"
      ]
    ]
  },
  {
    "id": "inject-save-history-5min",
    "type": "inject",
    "z": "8cb51d754613f073",
    "d": true,
    "name": "‚è∞ –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": "10",
    "topic": "",
    "payload": "auto_5min",
    "payloadType": "str",
    "x": 610,
    "y": 1040,
    "wires": [
      [
        "func-prepare-history-save"
      ]
    ]
  },
  {
    "id": "inject-save-history-1hour",
    "type": "inject",
    "z": "8cb51d754613f073",
    "name": "‚è∞ –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "5",
    "crontab": "",
    "once": false,
    "onceDelay": "60",
    "topic": "",
    "payload": "auto_1hour",
    "payloadType": "str",
    "x": 630,
    "y": 1080,
    "wires": [
      [
        "func-prepare-history-save"
      ]
    ]
  },
  {
    "id": "func-prepare-history-save",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó",
    "func": "const devices = flow.get('sim_devices') || {};\nconst trigger = msg.payload;\n\nnode.status({ \n    fill: \"yellow\", \n    shape: \"dot\", \n    text: `–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (${trigger})...` \n});\n\nconst historyUpdates = [];\n\n// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é\nfor (const deviceId in devices) {\n    if (devices.hasOwnProperty(deviceId)) {\n        const device = devices[deviceId];\n        const current = device.current;\n        \n        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –æ–Ω–ª–∞–π–Ω\n        if (device.isOnline) {\n            historyUpdates.push({\n                deviceId: deviceId,\n                wqi: current.wqi,\n                pH: current.ph,\n                temperature: current.temp,\n                tds: current.tds,\n                turbidity: current.turbidity,\n                timestamp: current.lastUpdate\n            });\n        }\n    }\n}\n\nnode.status({ \n    fill: \"blue\", \n    shape: \"dot\", \n    text: `–ì–æ—Ç–æ–≤–æ –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${historyUpdates.length} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤` \n});\n\n// –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è\nreturn { \n    payload: historyUpdates,\n    trigger: trigger,\n    timestamp: Date.now()\n};",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 1040,
    "wires": [
      [
        "func-create-history-requests"
      ]
    ]
  },
  {
    "id": "func-create-history-requests",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤",
    "func": "const historyUpdates = msg.payload;\n\nnode.status({ \n    fill: \"yellow\", \n    shape: \"ring\", \n    text: `–°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${historyUpdates.length} –∑–∞–ø–∏—Ç—ñ–≤...` \n});\n\nnode.status({ \n    fill: \"green\", \n    shape: \"dot\", \n    text: `${historyUpdates.length} –∑–∞–ø–∏—Ç—ñ–≤ –≥–æ—Ç–æ–≤–æ` \n});\n\n// –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ –¥–ª—è split –≤—É–∑–ª–∞\nreturn { payload: historyUpdates };",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1200,
    "y": 1040,
    "wires": [
      [
        "split-history-requests"
      ]
    ]
  },
  {
    "id": "split-history-requests",
    "type": "split",
    "z": "8cb51d754613f073",
    "name": "–†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –æ–∫—Ä–µ–º—ñ –∑–∞–ø–∏—Ç–∏",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 1200,
    "y": 1100,
    "wires": [
      [
        "func-format-single-request"
      ]
    ]
  },
  {
    "id": "func-format-single-request",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É",
    "func": "const update = msg.payload;\n\n// –§–æ—Ä–º–∞—Ç—É—î–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è HTTP –∑–∞–ø–∏—Ç—É\nreturn {\n    payload: {\n        deviceId: update.deviceId,\n        wqi: update.wqi,\n        pH: update.pH,\n        temperature: update.temperature,\n        tds: update.tds,\n        turbidity: update.turbidity\n    },\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    url: 'http://localhost:1880/api/updateParameterHistory',\n    method: 'POST',\n    deviceInfo: {\n        id: update.deviceId,\n        timestamp: update.timestamp\n    }\n};",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1200,
    "y": 1160,
    "wires": [
      [
        "http-request-save-history"
      ]
    ]
  },
  {
    "id": "http-request-save-history",
    "type": "http request",
    "z": "8cb51d754613f073",
    "name": "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": {},
    "x": 1480,
    "y": 1160,
    "wires": [
      [
        "func-process-save-response"
      ]
    ]
  },
  {
    "id": "func-process-save-response",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
    "func": "const response = msg.payload;\nconst deviceId = msg.deviceInfo ? msg.deviceInfo.id : 'unknown';\n\nif (response && response.success) {\n    node.status({ \n        fill: \"green\", \n        shape: \"dot\", \n        text: `‚úÖ ${deviceId}: –∑–±–µ—Ä–µ–∂–µ–Ω–æ` \n    });\n    \n    node.log(`‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é ${deviceId}: ${response.message}`);\n} else {\n    node.status({ \n        fill: \"red\", \n        shape: \"dot\", \n        text: `‚ùå ${deviceId}: –ø–æ–º–∏–ª–∫–∞` \n    });\n    \n    node.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è ${deviceId}: ${response?.error || 'Unknown error'}`);\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1730,
    "y": 1160,
    "wires": [
      [
        "debug-save-response"
      ]
    ]
  },
  {
    "id": "debug-save-response",
    "type": "debug",
    "z": "8cb51d754613f073",
    "name": "Debug: –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 2000,
    "y": 1160,
    "wires": []
  },
  {
    "id": "http-in-getwqi-dynamic",
    "type": "http in",
    "z": "8cb51d754613f073",
    "name": "GET /getWQI",
    "url": "/getWQI",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 550,
    "y": 580,
    "wires": [
      [
        "func-get-device-data"
      ]
    ]
  },
  {
    "id": "func-get-device-data",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "Retrieve Device WQI Data",
    "func": "const deviceId = msg.req.query.device;\nconst devices = flow.get('sim_devices') || {};\n\nif (devices.hasOwnProperty(deviceId)) {\n    const device = devices[deviceId];\n    msg.payload = {\n        wqi: device.current.wqi,\n        parameters: {\n            pH: device.current.ph,\n            temperature: device.current.temp,\n            tds: device.current.tds,\n            turbidity: device.current.turbidity\n        },\n        partial_scores: device.current.partial_scores,\n        timestamp: new Date(device.current.lastUpdate).toISOString(),\n        deviceName: device.name\n    };\n    msg.statusCode = 200;\n} else {\n    msg.payload = {\n        error: \"Unknown device ID\",\n        received_device_id: deviceId,\n        available_devices: Object.keys(devices)\n    };\n    msg.statusCode = 404;\n}\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 580,
    "wires": [
      [
        "http-response-dynamic"
      ]
    ]
  },
  {
    "id": "http-response-dynamic",
    "type": "http response",
    "z": "8cb51d754613f073",
    "name": "WQI Data Response",
    "statusCode": "",
    "headers": {
      "content-type": "application/json",
      "access-control-allow-origin": "*"
    },
    "x": 1200,
    "y": 580,
    "wires": []
  },
  {
    "id": "http-in-device-status",
    "type": "http in",
    "z": "8cb51d754613f073",
    "name": "GET /getDeviceStatus",
    "url": "/getDeviceStatus",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 580,
    "y": 660,
    "wires": [
      [
        "func-get-device-status"
      ]
    ]
  },
  {
    "id": "func-get-device-status",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "Retrieve Device Status & Technical Data",
    "func": "const deviceId = msg.req.query.device;\nconst devices = flow.get('sim_devices') || {};\n\nif (devices.hasOwnProperty(deviceId)) {\n    const device = devices[deviceId];\n    const tech = device.technical;\n    \n    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\n    const lastCalibrationDate = new Date(tech.lastCalibration).toLocaleDateString('uk-UA', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n    });\n    \n    msg.payload = {\n        // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π\n        deviceId: deviceId,\n        name: device.name,\n        customName: device.customName,\n        serverConfig: device.serverConfig,\n        isOnline: device.isOnline,\n        location: device.location,\n        lastUpdate: device.lastUpdate,\n        \n        // –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n        technical: {\n            powerSource: tech.powerSource,\n            operatingTime: tech.operatingTime || \"0 –≥–æ–¥ 0 —Ö–≤\",\n            batteryLevel: tech.batteryLevel,\n            ping: Math.abs(tech.signalStrength) + Math.floor(Math.random() * 10),\n            firmwareVersion: tech.firmwareVersion,\n            lastCalibration: lastCalibrationDate,\n            sensorStatus: tech.sensorStatus,\n            alerts: tech.alerts || []\n        },\n        \n        timestamp: new Date().toISOString()\n    };\n    msg.statusCode = 200;\n} else {\n    msg.payload = {\n        error: \"Unknown device ID\",\n        received_device_id: deviceId,\n        available_devices: Object.keys(devices)\n    };\n    msg.statusCode = 404;\n}\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 660,
    "wires": [
      [
        "http-response-device-status"
      ]
    ]
  },
  {
    "id": "http-response-device-status",
    "type": "http response",
    "z": "8cb51d754613f073",
    "name": "Device Status Response",
    "statusCode": "",
    "headers": {
      "content-type": "application/json",
      "access-control-allow-origin": "*"
    },
    "x": 1210,
    "y": 660,
    "wires": []
  },
  {
    "id": "http-in-calibrate",
    "type": "http in",
    "z": "8cb51d754613f073",
    "name": "POST /calibrateSensors",
    "url": "/calibrateSensors",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 580,
    "y": 740,
    "wires": [
      [
        "func-calibrate-sensors"
      ]
    ]
  },
  {
    "id": "func-calibrate-sensors",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "Perform Sensor Calibration",
    "func": "const devices = flow.get('sim_devices') || {};\nlet deviceId;\n\n// –û—Ç—Ä–∏–º–∞–Ω–Ω—è deviceId –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∞–±–æ body\nif (msg.req.query && msg.req.query.device) {\n    deviceId = msg.req.query.device;\n} else if (msg.payload && msg.payload.deviceId) {\n    deviceId = msg.payload.deviceId;\n} else {\n    msg.payload = {\n        success: false,\n        error: \"Device ID not provided\",\n        message: \"–í–∫–∞–∂—ñ—Ç—å ID –ø—Ä–∏—Å—Ç—Ä–æ—é –¥–ª—è –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\"\n    };\n    msg.statusCode = 400;\n    return msg;\n}\n\nif (devices.hasOwnProperty(deviceId)) {\n    const device = devices[deviceId];\n    const now = Date.now();\n    \n    // –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\n    device.technical.lastCalibration = now;\n    device.technical.sensorStatus = \"–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω\";\n    \n    // –°–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –¥–∞—Ç—á–∏–∫–∞–º–∏\n    for (const sensor in device.technical.sensorHealth) {\n        device.technical.sensorHealth[sensor] = \"online\";\n    }\n    \n    // –û—á–∏—â–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ –ø—Ä–æ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\n    device.technical.alerts = device.technical.alerts.filter(alert => \n        !['calibration_needed', 'calibration_overdue', 'sensor_drift'].includes(alert.type)\n    );\n    \n    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∞ler—Ç—É –ø—Ä–æ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è\n    device.technical.alerts.push({\n        id: `calibration_success_${now}`,\n        type: \"calibration_completed\",\n        severity: \"info\",\n        message: \"–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\",\n        timestamp: now,\n        acknowledged: false\n    });\n    \n    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n    flow.set('sim_devices', devices);\n    \n    const calibrationDate = new Date(now).toLocaleDateString('uk-UA', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n    \n    msg.payload = {\n        success: true,\n        message: \"–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\",\n        deviceId: deviceId,\n        calibrationDate: calibrationDate,\n        affectedSensors: [\"pH\", \"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\", \"TDS\", \"–∫–∞–ª–∞–º—É—Ç–Ω—ñ—Å—Ç—å\"],\n        timestamp: new Date(now).toISOString()\n    };\n    msg.statusCode = 200;\n} else {\n    msg.payload = {\n        success: false,\n        error: \"Unknown device ID\",\n        received_device_id: deviceId,\n        available_devices: Object.keys(devices)\n    };\n    msg.statusCode = 404;\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 740,
    "wires": [
      [
        "http-response-calibrate"
      ]
    ]
  },
  {
    "id": "http-response-calibrate",
    "type": "http response",
    "z": "8cb51d754613f073",
    "name": "Calibration Response",
    "statusCode": "",
    "headers": {
      "content-type": "application/json",
      "access-control-allow-origin": "*"
    },
    "x": 1200,
    "y": 740,
    "wires": []
  },
  {
    "id": "http-in-listsensors",
    "type": "http in",
    "z": "8cb51d754613f073",
    "name": "GET /listAvailableSensors",
    "url": "/listAvailableSensors",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 590,
    "y": 860,
    "wires": [
      [
        "func-list-sensors"
      ]
    ]
  },
  {
    "id": "func-list-sensors",
    "type": "function",
    "z": "8cb51d754613f073",
    "name": "List Available Sensors",
    "func": "const devices = flow.get('sim_devices') || {};\nconst availableSensors = [];\n\nfor (const deviceId in devices) {\n    if (devices.hasOwnProperty(deviceId)) {\n        const device = devices[deviceId];\n        availableSensors.push({\n            id: deviceId,\n            name: device.name,\n            customName: device.customName,\n            serverConfig: device.serverConfig,\n            isOnline: device.isOnline,\n            status: device.technical.connectionStatus,\n            lastUpdate: new Date(device.current.lastUpdate).toISOString()\n        });\n    }\n}\n\nmsg.payload = {\n    sensors: availableSensors,\n    totalCount: availableSensors.length,\n    timestamp: new Date().toISOString()\n};\nmsg.statusCode = 200;\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 860,
    "wires": [
      [
        "http-response-listsensors"
      ]
    ]
  },
  {
    "id": "http-response-listsensors",
    "type": "http response",
    "z": "8cb51d754613f073",
    "name": "Sensor List Response",
    "statusCode": "",
    "headers": {
      "content-type": "application/json",
      "access-control-allow-origin": "*"
    },
    "x": 1200,
    "y": 860,
    "wires": []
  },
  {
    "id": "debug-init",
    "type": "debug",
    "z": "8cb51d754613f073",
    "name": "Debug: Initialization",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1190,
    "y": 400,
    "wires": []
  },
  {
    "id": "debug-update",
    "type": "debug",
    "z": "8cb51d754613f073",
    "name": "Debug: State Update",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1200,
    "y": 480,
    "wires": []
  },
  {
    "id": "inject-test-calibration",
    "type": "inject",
    "z": "8cb51d754613f073",
    "name": "Test Calibration (111001)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"deviceId\":\"111001\"}",
    "payloadType": "json",
    "x": 590,
    "y": 800,
    "wires": [
      [
        "func-calibrate-sensors"
      ]
    ]
  }
]