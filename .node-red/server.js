const express = require('express');
const RED = require('node-red');
const http = require('http');
const path = require('path');

// –Ü–º–ø–æ—Ä—Ç fetch –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API (–¥–ª—è Node.js –≤–µ—Ä—Å—ñ–π –Ω–∏–∂—á–µ 18)
let fetch;
try {
    fetch = global.fetch || require('node-fetch');
} catch (e) {
    console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π fetch –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–ª—É—à–∫—É');
    fetch = () => Promise.reject(new Error('Fetch –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π'));
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Express app
const app = express();

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(app);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Node-RED
const settings = {
    httpAdminRoot: '/admin',
    httpNodeRoot: '/api',
    userDir: __dirname,
    flowFile: path.join(__dirname, 'flows.json'),
    credentialSecret: 'water-monitoring-secret-key-2025',
    httpNodeCors: {
        origin: "*",
        methods: "GET,PUT,POST,DELETE",
        allowedHeaders: "Content-Type, Authorization"
    },
    logging: {
        console: {
            level: "info",
            metrics: false,
            audit: false
        }
    },
    editorTheme: {
        projects: {
            enabled: false
        }
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Node-RED
RED.init(server, settings);

// –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
const parameterHistory = new Map(); // –ö–∞—Ä—Ç–∞ deviceId -> {parameterType -> array of {timestamp, value}}

// –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
const SUPPORTED_PARAMETERS = ['wqi', 'ph', 'temperature', 'tds', 'turbidity'];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
function addParameterPoint(deviceId, parameterType, value) {
    if (!SUPPORTED_PARAMETERS.includes(parameterType)) {
        console.warn(`‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${parameterType}`);
        return;
    }

    if (!parameterHistory.has(deviceId)) {
        parameterHistory.set(deviceId, new Map());
    }
    
    const deviceHistory = parameterHistory.get(deviceId);
    if (!deviceHistory.has(parameterType)) {
        deviceHistory.set(parameterType, []);
    }
    
    const history = deviceHistory.get(parameterType);
    const newPoint = {
        timestamp: Date.now(),
        value: value
    };
    
    history.push(newPoint);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 48 —Ç–æ—á–æ–∫ (48 –≥–æ–¥–∏–Ω —ñ—Å—Ç–æ—Ä—ñ—ó)
    if (history.length > 48) {
        history.shift();
    }
    
    deviceHistory.set(parameterType, history);
    console.log(`üìä ${parameterType.toUpperCase()} –∑–±–µ—Ä–µ–∂–µ–Ω–æ: –ø—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}, ${parameterType}=${value}, —á–∞—Å=${new Date(newPoint.timestamp).toLocaleString()}`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
function getParameterHistory(deviceId, parameterType, hoursBack = 24) {
    if (!parameterHistory.has(deviceId)) {
        return [];
    }
    
    const deviceHistory = parameterHistory.get(deviceId);
    if (!deviceHistory.has(parameterType)) {
        return [];
    }
    
    const history = deviceHistory.get(parameterType);
    const cutoffTime = Date.now() - (hoursBack * 60 * 60 * 1000);
    
    return history.filter(point => point.timestamp >= cutoffTime);
}

// –ó–≤–æ—Ä–æ—Ç–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å: —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è WQI
function addWQIPoint(deviceId, wqi) {
    addParameterPoint(deviceId, 'wqi', wqi);
}

function getWQIHistory(deviceId, hoursBack = 24) {
    return getParameterHistory(deviceId, 'wqi', hoursBack).map(point => ({
        timestamp: point.timestamp,
        wqi: point.value
    }));
}

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ JSON
app.use(express.json());

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É WQI (–∫–æ–ø—ñ—è –∑ flows.json)
function calculateWQI(params) {
    let totalWQI = 0;
    // pH Score
    if (params.pH >= 7.0 && params.pH <= 7.6) totalWQI += 25;
    else if (params.pH >= 6.5 && params.pH <= 8.5) totalWQI += 18;
    else if (params.pH >= 6.0 && params.pH <= 9.0) totalWQI += 10;
    else totalWQI += 5;
    // Temperature Score
    if (params.temperature >= 18 && params.temperature <= 22) totalWQI += 25;
    else if (params.temperature >= 15 && params.temperature <= 25) totalWQI += 18;
    else if (params.temperature >= 10 && params.temperature <= 30) totalWQI += 10;
    else totalWQI += 5;
    // TDS Score
    if (params.tds <= 300) totalWQI += 25;
    else if (params.tds <= 500) totalWQI += 18;
    else if (params.tds <= 800) totalWQI += 10;
    else totalWQI += 5;
    // Turbidity Score
    if (params.turbidity <= 1) totalWQI += 25;
    else if (params.turbidity <= 5) totalWQI += 18;
    else if (params.turbidity <= 10) totalWQI += 10;
    else totalWQI += 5;
    return Math.max(0, Math.min(100, totalWQI));
}

// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
app.get(settings.httpNodeRoot + '/getParameterHistory', (req, res) => {
    const deviceId = req.query.device;
    const parameter = req.query.parameter; // pH, temperature, tds, turbidity, wqi
    const hoursBack = parseInt(req.query.hours) || 24;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    if (!deviceId) {
        return res.status(400).json({
            error: 'Device ID is required',
            message: '–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä device'
        });
    }

    if (!parameter) {
        return res.status(400).json({
            error: 'Parameter is required',
            message: '–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä parameter',
            supportedParameters: SUPPORTED_PARAMETERS
        });
    }

    const parameterLower = parameter.toLowerCase();
    
    if (!SUPPORTED_PARAMETERS.includes(parameterLower)) {
        return res.status(400).json({
            error: 'Parameter not supported',
            message: `–ü–∞—Ä–∞–º–µ—Ç—Ä '${parameter}' –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è`,
            supportedParameters: SUPPORTED_PARAMETERS
        });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const history = getParameterHistory(deviceId, parameterLower, hoursBack);
    
    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const formattedHistory = history.map(point => ({
        timestamp: point.timestamp,
        value: point.value
    }));
    
    return res.json({
        deviceId,
        parameter: parameterLower,
        hoursBack,
        data: formattedHistory,
        count: formattedHistory.length,
        source: formattedHistory.length > 0 ? `${parameterLower}_history` : 'no_data'
    });
});

// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π endpoint –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
app.post(settings.httpNodeRoot + '/updateParameterHistory', (req, res) => {
    const { deviceId, wqi, pH, temperature, tds, turbidity } = req.body;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    if (!deviceId) {
        return res.status(400).json({
            error: 'Missing required data',
            message: '–ü–æ—Ç—Ä—ñ–±–Ω–∏–π deviceId'
        });
    }

    const updates = [];
    const errors = [];
    
    try {
        // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∫—Ä–µ–º–æ
        if (wqi !== undefined) {
            addParameterPoint(deviceId, 'wqi', wqi);
            updates.push(`WQI: ${wqi}`);
        }        if (pH !== undefined) {
            addParameterPoint(deviceId, 'ph', pH);
            updates.push(`pH: ${pH}`);
        }
        if (temperature !== undefined) {
            addParameterPoint(deviceId, 'temperature', temperature);
            updates.push(`Temperature: ${temperature}¬∞C`);
        }
        if (tds !== undefined) {
            addParameterPoint(deviceId, 'tds', tds);
            updates.push(`TDS: ${tds} ppm`);
        }
        if (turbidity !== undefined) {
            addParameterPoint(deviceId, 'turbidity', turbidity);
            updates.push(`Turbidity: ${turbidity} NTU`);
        }

        if (updates.length === 0) {
            return res.status(400).json({
                error: 'No valid parameters provided',
                message: '–ù–µ –Ω–∞–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
                supportedParameters: SUPPORTED_PARAMETERS
            });
        }
        
        res.json({
            success: true,
            message: `–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é ${deviceId}: ${updates.join(', ')}`,
            timestamp: Date.now(),
            updatedParameters: updates.length
        });
    } catch (error) {
        console.error('Error updating parameter history:', error);
        res.status(500).json({
            error: 'Internal server error',
            message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤'
        });    }
});

// –ù–æ–≤–∏–π endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
app.get(settings.httpNodeRoot + '/getSupportedParameters', (req, res) => {
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    res.json({
        supportedParameters: SUPPORTED_PARAMETERS,        parameterInfo: {
            'wqi': { name: 'Water Quality Index', unit: '', description: '–Ü–Ω–¥–µ–∫—Å —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏' },
            'ph': { name: 'pH Level', unit: '', description: '–†—ñ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç—ñ' },
            'temperature': { name: 'Temperature', unit: '¬∞C', description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥–∏' },
            'tds': { name: 'Total Dissolved Solids', unit: 'ppm', description: '–ó–∞–≥–∞–ª—å–Ω—ñ —Ä–æ–∑—á–∏–Ω–µ–Ω—ñ —Ä–µ—á–æ–≤–∏–Ω–∏' },
            'turbidity': { name: 'Turbidity', unit: 'NTU', description: '–ö–∞–ª–∞–º—É—Ç–Ω—ñ—Å—Ç—å –≤–æ–¥–∏' }
        },
        totalParameters: SUPPORTED_PARAMETERS.length
    });
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use(settings.httpAdminRoot, RED.httpAdmin);
app.use(settings.httpNodeRoot, RED.httpNode);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 1880;
server.listen(PORT, function() {
    console.log('üåä Water Monitoring Node-RED Server –∑–∞–ø—É—â–µ–Ω–∏–π!');
    console.log(`üìä Admin –ø–∞–Ω–µ–ª—å: http://localhost:${PORT}${settings.httpAdminRoot}`);
    console.log(`üîó API endpoints: http://localhost:${PORT}${settings.httpNodeRoot}`);    console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ñ API:');
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getWQI?device=111001`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getDeviceStatus?device=111001`);
    console.log(`   ‚Ä¢ POST ${settings.httpNodeRoot}/calibrateSensors?device=111001`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/listAvailableSensors`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getParameterHistory?device=111001&parameter={wqi|ph|temperature|tds|turbidity}&hours=24`);
    console.log(`   ‚Ä¢ POST ${settings.httpNodeRoot}/updateParameterHistory (body: {deviceId, wqi?, pH?, temperature?, tds?, turbidity?})`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getSupportedParameters`);
    console.log('');
    console.log('üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C');
    console.log('üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ Node-RED flow');
    
    // –ó–∞–ø—É—Å–∫ Node-RED runtime
    RED.start().then(() => {
        console.log('‚úÖ Node-RED flows –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–∞ –∑–∞–ø—É—â–µ–Ω—ñ');
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Node-RED inject –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é');
    }).catch(err => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Node-RED:', err);
    });
});
