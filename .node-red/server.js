const express = require('express');
const RED = require('node-red');
const http = require('http');
const path = require('path');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Express app
const app = express();

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(app);

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Node-RED
const settings = {
    httpAdminRoot: '/admin',
    httpNodeRoot: '/api',
    userDir: __dirname,
    flowFile: path.join(__dirname, 'flows.json'),
    credentialSecret: 'water-monitoring-secret-key-2025',
    httpNodeCors: {
        origin: "*",
        methods: "GET,PUT,POST,DELETE",
        allowedHeaders: "Content-Type, Authorization"
    },
    logging: {
        console: {
            level: "info",
            metrics: false,
            audit: false
        }
    },
    editorTheme: {
        projects: {
            enabled: false
        }
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Node-RED
RED.init(server, settings);

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
const historicalData = new Map();

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
function generateInitialHistory(deviceId, currentParams) {
    const history = [];
    const now = Date.now();
    const hoursBack = 24; // 24 –≥–æ–¥–∏–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó
    
    for (let i = hoursBack; i >= 0; i--) {
        const timestamp = now - (i * 60 * 60 * 1000); // –ö–æ–∂–Ω–∞ –≥–æ–¥–∏–Ω–∞
          // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        const variation = 0.15; // –ó–±—ñ–ª—å—à—É—î–º–æ –≤–∞—Ä—ñ–∞—Ü—ñ—é –¥–æ 15%
        const data = {
            timestamp,
            pH: Number((currentParams.pH + (Math.random() - 0.5) * currentParams.pH * variation).toFixed(2)),
            temperature: Number((currentParams.temperature + (Math.random() - 0.5) * currentParams.temperature * variation).toFixed(1)),
            tds: Math.floor(currentParams.tds + (Math.random() - 0.5) * currentParams.tds * variation),
            turbidity: Number((currentParams.turbidity + (Math.random() - 0.5) * Math.max(currentParams.turbidity * variation, 0.3)).toFixed(1))
        };
          // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ä–æ–∑—É–º–Ω–∏—Ö –º–µ–∂–∞—Ö
        data.pH = Math.max(0, Math.min(14, data.pH));
        data.temperature = Math.max(0, Math.min(40, data.temperature));
        data.tds = Math.max(0, Math.min(2000, data.tds));
        data.turbidity = Math.max(0.1, Math.min(50, data.turbidity)); // –ú—ñ–Ω—ñ–º—É–º 0.1 –¥–ª—è –∫–∞–ª–∞–º—É—Ç–Ω–æ—Å—Ç—ñ
        
        history.push(data);
    }
    
    return history;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
function addHistoryPoint(deviceId, params) {
    if (!historicalData.has(deviceId)) {
        historicalData.set(deviceId, generateInitialHistory(deviceId, params));
    }
    
    const history = historicalData.get(deviceId);
    const newPoint = {
        timestamp: Date.now(),
        pH: params.pH,
        temperature: params.temperature,
        tds: params.tds,
        turbidity: params.turbidity
    };
    
    history.push(newPoint);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100 —Ç–æ—á–æ–∫ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 –¥–Ω—ñ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É)
    if (history.length > 100) {
        history.shift();
    }
    
    historicalData.set(deviceId, history);
}

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ JSON
app.use(express.json());

// –ù–æ–≤–∏–π endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
app.get(settings.httpNodeRoot + '/getParameterHistory', (req, res) => {
    const deviceId = req.query.device;
    const parameter = req.query.parameter; // pH, temperature, tds, turbidity
    const hoursBack = parseInt(req.query.hours) || 24; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24 –≥–æ–¥–∏–Ω–∏
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    if (!deviceId) {
        return res.status(400).json({
            error: 'Device ID is required',
            message: '–í–∫–∞–∂—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä device'
        });
    }
      // –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É
    if (!historicalData.has(deviceId)) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
        let currentParams = { pH: 7.2, temperature: 20, tds: 300, turbidity: 1.5 };
        
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É Node-RED, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ Node-RED –≥–æ—Ç–æ–≤–∏–π
            if (RED && RED.settings && RED.settings.get) {
                const globalContext = RED.settings.get('context');
                if (globalContext && globalContext.default) {
                    const context = globalContext.default;
                    const devices = context.get('sim_devices');
                    if (devices && devices[deviceId]) {
                        currentParams = devices[deviceId].current;
                    }
                }
            }
        } catch (e) {
            console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—ó');
        }
        
        historicalData.set(deviceId, generateInitialHistory(deviceId, currentParams));
    }
    
    const history = historicalData.get(deviceId);
    const cutoffTime = Date.now() - (hoursBack * 60 * 60 * 1000);
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –∑–∞ —á–∞—Å–æ–º
    let filteredHistory = history.filter(point => point.timestamp >= cutoffTime);
    
    // –Ø–∫—â–æ –∑–∞–ø–∏—Ç–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ
    if (parameter && ['pH', 'temperature', 'tds', 'turbidity'].includes(parameter)) {
        filteredHistory = filteredHistory.map(point => ({
            timestamp: point.timestamp,
            value: point[parameter]
        }));
        
        return res.json({
            deviceId,
            parameter,
            hoursBack,
            data: filteredHistory,
            count: filteredHistory.length
        });
    }
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    res.json({
        deviceId,
        hoursBack,
        data: filteredHistory,
        count: filteredHistory.length
    });
});

// –ù–æ–≤–∏–π endpoint –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
app.post(settings.httpNodeRoot + '/updateParameterHistory', (req, res) => {
    const { deviceId, parameters } = req.body;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Access-Control-Allow-Origin', '*');
    
    if (!deviceId || !parameters) {
        return res.status(400).json({
            error: 'Missing required data',
            message: '–ü–æ—Ç—Ä—ñ–±–Ω—ñ deviceId —Ç–∞ parameters'
        });
    }
    
    try {
        addHistoryPoint(deviceId, parameters);
        res.json({
            success: true,
            message: '–Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ',
            timestamp: Date.now()
        });
    } catch (error) {
        console.error('Error updating history:', error);
        res.status(500).json({
            error: 'Internal server error',
            message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö'
        });
    }
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use(settings.httpAdminRoot, RED.httpAdmin);
app.use(settings.httpNodeRoot, RED.httpNode);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 1880;
server.listen(PORT, function() {
    console.log('üåä Water Monitoring Node-RED Server –∑–∞–ø—É—â–µ–Ω–∏–π!');
    console.log(`üìä Admin –ø–∞–Ω–µ–ª—å: http://localhost:${PORT}${settings.httpAdminRoot}`);
    console.log(`üîó API endpoints: http://localhost:${PORT}${settings.httpNodeRoot}`);    console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ñ API:');
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getWQI?device=111001`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getDeviceStatus?device=111001`);
    console.log(`   ‚Ä¢ POST ${settings.httpNodeRoot}/calibrateSensors?device=111001`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/listAvailableSensors`);
    console.log(`   ‚Ä¢ GET  ${settings.httpNodeRoot}/getParameterHistory?device=111001&parameter=pH&hours=24`);
    console.log(`   ‚Ä¢ POST ${settings.httpNodeRoot}/updateParameterHistory`);
    console.log('');
    console.log('üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C');
    
    // –ó–∞–ø—É—Å–∫ Node-RED runtime
    RED.start().then(() => {
        console.log('‚úÖ Node-RED flows –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ç–∞ –∑–∞–ø—É—â–µ–Ω—ñ');
    }).catch(err => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Node-RED:', err);
    });
});
