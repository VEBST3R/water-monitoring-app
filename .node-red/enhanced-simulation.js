/**
 * Enhanced Water Quality Simulation Engine v3 - Ultra Smooth Edition
 * –ú–æ–¥—É–ª—å –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–ª–∞–≤–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ —Ç–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å —Ö–∞–æ—Ç–∏—á–Ω–∏—Ö –∫–æ–ª–∏–≤–∞–Ω—å
 */

class EnhancedWaterSimulation {
    constructor(initialDeviceConfigs, calculateWQI, formatOperatingTime) {
        this.devices = JSON.parse(JSON.stringify(initialDeviceConfigs));
        this.calculateWQI = calculateWQI;
        this.formatOperatingTime = formatOperatingTime;
        this.simulationStartTime = Date.now();
        
        // –£–õ–¨–¢–†–ê-–ü–õ–ê–í–ù–Ü –∞–º–ø–ª—ñ—Ç—É–¥–∏ –∫–æ–ª–∏–≤–∞–Ω—å (–∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞ 75-90% –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
        this.variationAmplitudes = {
            ph: { normal: 0.02, event: 0.05, crisis: 0.1 },       // pH: ¬±0.02 –Ω–æ—Ä–º–∞ (–¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ –∑–º–µ–Ω—à–µ–Ω–æ)
            temp: { normal: 0.3, event: 0.5, crisis: 1.0 },       // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ¬±0.3¬∞C –Ω–æ—Ä–º–∞ (–∑–º–µ–Ω—à–µ–Ω–æ)  
            tds: { normal: 8, event: 15, crisis: 30 },             // TDS: ¬±8 –Ω–æ—Ä–º–∞ (–∑–º–µ–Ω—à–µ–Ω–æ)
            turbidity: { normal: 0.05, event: 0.1, crisis: 0.2 }  // –ú—É—Ç–Ω—ñ—Å—Ç—å: ¬±0.05 –Ω–æ—Ä–º–∞ (–¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ –∑–º–µ–Ω—à–µ–Ω–æ)
        };
        
        // –°–∏—Å—Ç–µ–º–∞ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (5-35 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä—ñ–æ–¥–∏)
        this.longTermTrends = {};
        
        // –ú'—è–∫—ñ —Å–∏—Å—Ç–µ–º–∏ –ø–æ–¥—ñ–π –∑–∞–º—ñ—Å—Ç—å —Ä—ñ–∑–∫–∏—Ö —Å—Ç—Ä–∏–±–∫—ñ–≤
        this.eventTypes = {
            GRADUAL_POLLUTION: 'gradual_pollution',      // –ü–æ–≤—ñ–ª—å–Ω–µ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 5-15 —Ö–≤–∏–ª–∏–Ω
            SLOW_CHEMICAL_CHANGE: 'slow_chemical_change', // –•—ñ–º—ñ—á–Ω—ñ –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10-20 —Ö–≤–∏–ª–∏–Ω
            SEASONAL_VARIATION: 'seasonal_variation',     // –°–µ–∑–æ–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ç—è–≥–æ–º 15-30 —Ö–≤–∏–ª–∏–Ω
            EQUIPMENT_AGING: 'equipment_aging',           // –°—Ç–∞—Ä—ñ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 20-30 —Ö–≤–∏–ª–∏–Ω
            WATER_SOURCE_CHANGE: 'water_source_change',   // –ó–º—ñ–Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ –≤–æ–¥–∏ –ø—Ä–æ—Ç—è–≥–æ–º 10-25 —Ö–≤–∏–ª–∏–Ω
            RECOVERY_PHASE: 'recovery_phase'              // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 10-20 —Ö–≤–∏–ª–∏–Ω
        };
        
        // –°–∏—Å—Ç–µ–º–∞ —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤ —è–∫–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
        this.qualityCycles = {};
        this.activeEvents = {};
        
        this.initializeDeviceStates();
        
        console.log('üåä Enhanced Water Simulation v3 Ultra Smooth Edition initialized - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ –∑–º—ñ–Ω–∏');
    }

    initializeDeviceStates() {
        for (const deviceId in this.devices) {
            this.activeEvents[deviceId] = [];
            this.devices[deviceId].activeEvents = [];
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –£–õ–¨–¢–†–ê-–ø–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É —è–∫–æ—Å—Ç—ñ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π)
            this.qualityCycles[deviceId] = {
                phase: 'stable', // stable, slow_degrading, slow_recovering
                phaseStartTime: Date.now(),
                degradationLevel: 0, // 0-1 (0 = —á–∏—Å—Ç–∞ –≤–æ–¥–∞, 1 = –∫—Ä–∏—Ç–∏—á–Ω–µ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è)
                targetDegradation: 0,
                changeRate: 0.0005, // –©–µ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω (–∑–º–µ–Ω—à–µ–Ω–æ –≤–¥–≤—ñ—á—ñ)
                lastQualityChange: Date.now()
            };
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö –ü–õ–ê–í–ù–ò–• —Ç—Ä–µ–Ω–¥—ñ–≤ (5-35 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä—ñ–æ–¥–∏)
            this.longTermTrends[deviceId] = {
                ph: {
                    direction: (Math.random() - 0.5) * 0.0005,   // –ù–∞–ø—Ä—è–º–æ–∫ —Ç—Ä–µ–Ω–¥—É ¬±0.0005/—Å–µ–∫—É–Ω–¥—É (–∑–º–µ–Ω—à–µ–Ω–æ)
                    period: 300000 + Math.random() * 1800000,    // –ü–µ—Ä—ñ–æ–¥ 5-35 —Ö–≤–∏–ª–∏–Ω (–∑–±—ñ–ª—å—à–µ–Ω–æ)
                    amplitude: 0.05 + Math.random() * 0.1,       // –ê–º–ø–ª—ñ—Ç—É–¥–∞ 0.05-0.15 (–∑–º–µ–Ω—à–µ–Ω–æ)
                    startTime: Date.now(),
                    baseValue: this.devices[deviceId].baseline.ph
                },
                temp: {
                    direction: (Math.random() - 0.5) * 0.001,    // –ó–º–µ–Ω—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                    period: 600000 + Math.random() * 1800000,    // –ü–µ—Ä—ñ–æ–¥ 10-40 —Ö–≤–∏–ª–∏–Ω  
                    amplitude: 0.5 + Math.random() * 1.0,        // –ê–º–ø–ª—ñ—Ç—É–¥–∞ 0.5-1.5¬∞C (–∑–º–µ–Ω—à–µ–Ω–æ)
                    startTime: Date.now(),
                    baseValue: this.devices[deviceId].baseline.temp
                },
                tds: {
                    direction: (Math.random() - 0.5) * 0.05,     // –ó–º–µ–Ω—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                    period: 900000 + Math.random() * 1500000,    // –ü–µ—Ä—ñ–æ–¥ 15-40 —Ö–≤–∏–ª–∏–Ω
                    amplitude: 10 + Math.random() * 20,          // –ê–º–ø–ª—ñ—Ç—É–¥–∞ 10-30 (–∑–º–µ–Ω—à–µ–Ω–æ)
                    startTime: Date.now(),
                    baseValue: this.devices[deviceId].baseline.tds
                },
                turbidity: {
                    direction: (Math.random() - 0.5) * 0.0002,   // –ó–º–µ–Ω—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
                    period: 600000 + Math.random() * 1200000,    // –ü–µ—Ä—ñ–æ–¥ 10-30 —Ö–≤–∏–ª–∏–Ω
                    amplitude: 0.03 + Math.random() * 0.07,      // –ê–º–ø–ª—ñ—Ç—É–¥–∞ 0.03-0.1 (–∑–º–µ–Ω—à–µ–Ω–æ)
                    startTime: Date.now(),
                    baseValue: this.devices[deviceId].baseline.turbidity
                }
            };
            
            console.log(`üéØ –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω—ñ —Ç—Ä–µ–Ω–¥–∏ - pH –ø–µ—Ä—ñ–æ–¥ ${(this.longTermTrends[deviceId].ph.period/60000).toFixed(1)} —Ö–≤, –∞–º–ø–ª—ñ—Ç—É–¥–∞ ¬±${this.longTermTrends[deviceId].ph.amplitude.toFixed(3)}`);
        }
    }

    // –£–õ–¨–¢–†–ê-–ø–ª–∞–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–∫–ª–∞–º–∏ —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏ –∑ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏
    updateQualityCycle(deviceId) {
        const cycle = this.qualityCycles[deviceId];
        const currentTime = Date.now();
        const phaseTime = currentTime - cycle.phaseStartTime;
        
        switch (cycle.phase) {
            case 'stable':
                // –î–£–ñ–ï —Ä—ñ–¥–∫–∏–π —à–∞–Ω—Å –ø–æ—á–∞—Ç–∫—É –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è (1% –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥)
                if (Math.random() < 0.01 && phaseTime > 30000) {
                    this.startSlowDegradation(deviceId);
                }
                // –î–£–ñ–ï –ø–æ–≤—ñ–ª—å–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                cycle.degradationLevel = Math.max(0, cycle.degradationLevel - 0.001);
                break;
                
            case 'slow_degrading':
                // –£–õ–¨–¢–†–ê-–ø–æ–≤—ñ–ª—å–Ω–µ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 5-15 —Ö–≤–∏–ª–∏–Ω
                const degradationDuration = 300000 + Math.random() * 600000; // 5-15 —Ö–≤–∏–ª–∏–Ω
                const progress = Math.min(1, phaseTime / degradationDuration);
                
                // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø–ª–∞–≤–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—ó (—Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∞ –∫—Ä–∏–≤–∞)
                const smoothProgress = Math.sin(progress * Math.PI / 2); // S-–ø–æ–¥—ñ–±–Ω–∞ –∫—Ä–∏–≤–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
                cycle.degradationLevel = smoothProgress * cycle.targetDegradation;
                
                if (progress >= 1) {
                    cycle.phase = 'slow_recovering';
                    cycle.phaseStartTime = currentTime;
                    console.log(`üîÑ –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}: –ü–æ—á–∞—Ç–æ–∫ —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ä—ñ–≤–µ–Ω—å: ${(cycle.degradationLevel * 100).toFixed(1)}%)`);
                }
                break;
                
            case 'slow_recovering':
                // –£–õ–¨–¢–†–ê-–ø–æ–≤—ñ–ª—å–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 10-20 —Ö–≤–∏–ª–∏–Ω
                const recoveryDuration = 600000 + Math.random() * 600000; // 10-20 —Ö–≤–∏–ª–∏–Ω
                const recoveryProgress = Math.min(1, phaseTime / recoveryDuration);
                
                // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø–ª–∞–≤–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (–∑–≤–æ—Ä–æ—Ç–Ω–∞ —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∞ –∫—Ä–∏–≤–∞)
                const smoothRecovery = Math.cos(recoveryProgress * Math.PI / 2);
                cycle.degradationLevel = cycle.targetDegradation * smoothRecovery;
                
                if (recoveryProgress >= 1) {
                    cycle.phase = 'stable';
                    cycle.phaseStartTime = currentTime;
                    cycle.degradationLevel = 0;
                    console.log(`‚úÖ –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}: –Ø–∫—ñ—Å—Ç—å –≤–æ–¥–∏ —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ`);
                }
                break;
        }
    }
    
    startSlowDegradation(deviceId) {
        const cycle = this.qualityCycles[deviceId];
        cycle.phase = 'slow_degrading';
        cycle.phaseStartTime = Date.now();
        cycle.targetDegradation = 0.05 + Math.random() * 0.15; // 5-20% –ø–ª–∞–≤–Ω–µ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è (–ó–ú–ï–ù–®–ï–ù–û)
        
        // –í–∏–±—ñ—Ä —Ç–∏–ø—É –£–õ–¨–¢–†–ê-–ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è
        const pollutionTypes = [
            this.eventTypes.GRADUAL_POLLUTION,
            this.eventTypes.SLOW_CHEMICAL_CHANGE,
            this.eventTypes.SEASONAL_VARIATION,
            this.eventTypes.EQUIPMENT_AGING,
            this.eventTypes.WATER_SOURCE_CHANGE
        ];
        
        const selectedType = pollutionTypes[Math.floor(Math.random() * pollutionTypes.length)];
        
        const event = {
            type: selectedType,
            startTime: Date.now(),
            duration: 900000 + Math.random() * 1200000, // 15-35 —Ö–≤–∏–ª–∏–Ω (–ó–ë–Ü–õ–¨–®–ï–ù–û –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ)
            intensity: cycle.targetDegradation,
            id: `ultra_smooth_degradation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
        };
        
        this.activeEvents[deviceId].push(event);
        this.devices[deviceId].activeEvents = this.activeEvents[deviceId];
        
        console.log(`üêå –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId}: –ü–æ—á–∞—Ç–æ–∫ —É–ª—å—Ç—Ä–∞-–ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è - ${selectedType} (—Ü—ñ–ª—å–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å: ${(cycle.targetDegradation * 100).toFixed(1)}%, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${(event.duration/60000).toFixed(1)} —Ö–≤)`);
    }
    
    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –£–õ–¨–¢–†–ê-–º'—è–∫–∏—Ö –∑–º—ñ–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏–∫–ª—É
    applyQualityDegradation(deviceId, baseParams) {
        const cycle = this.qualityCycles[deviceId];
        const degradation = cycle.degradationLevel;
        
        if (degradation === 0) return baseParams;
        
        let modifiedParams = { ...baseParams };
        
        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –†–ï–ê–õ–Ü–°–¢–ò–ß–ù–û–ì–û –≤–ø–ª–∏–≤—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—ó (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∑–º–µ–Ω—à–µ–Ω–æ)
        const phShift = degradation * (0.05 + Math.random() * 0.1); // pH –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—è –Ω–∞ 0.05-0.15 (–ó–ú–ï–ù–®–ï–ù–û)
        const tempIncrease = degradation * (0.2 + Math.random() * 0.3); // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ +0.2-0.5¬∞C (–ó–ú–ï–ù–®–ï–ù–û)
        const tdsIncrease = degradation * (15 + Math.random() * 25); // TDS +15-40 (–ó–ú–ï–ù–®–ï–ù–û)
        const turbidityIncrease = degradation * (0.1 + Math.random() * 0.2); // –ú—É—Ç–Ω—ñ—Å—Ç—å +0.1-0.3 (–î–†–ê–ú–ê–¢–ò–ß–ù–û –∑–º–µ–Ω—à–µ–Ω–æ)
        
        // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –Ω–∞–ø—Ä—è–º–∫—É –∑–º—ñ–Ω pH (–∫–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å –∞–±–æ –ª—É–∂–Ω—ñ—Å—Ç—å)
        if (Math.random() > 0.5) {
            modifiedParams.ph -= phShift; // –ö–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å
        } else {
            modifiedParams.ph += phShift; // –õ—É–∂–Ω—ñ—Å—Ç—å
        }
        
        modifiedParams.temp += tempIncrease;
        modifiedParams.tds += tdsIncrease;
        modifiedParams.turbidity += turbidityIncrease;
        
        return modifiedParams;
    }

    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –î–û–í–ì–û–°–¢–†–û–ö–û–í–ò–• —Ç—Ä–µ–Ω–¥—ñ–≤ (–Ω–æ–≤–∏–π –º–µ—Ç–æ–¥)
    applyLongTermTrends(deviceId, currentParams, timestamp) {
        const trends = this.longTermTrends[deviceId];
        const timeSinceStart = timestamp - this.simulationStartTime;
        
        let trendParams = { ...currentParams };
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        for (const param in trends) {
            const trend = trends[param];
            const cyclePosition = (timeSinceStart / trend.period) * 2 * Math.PI;
            const trendValue = Math.sin(cyclePosition) * trend.amplitude;
            
            // –ü–ª–∞–≤–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—É
            trendParams[param] = trend.baseValue + trendValue + (trend.direction * timeSinceStart / 1000);
        }
        
        return trendParams;
    }
    
    // –£–õ–¨–¢–†–ê-–ø–ª–∞–≤–Ω—ñ –ø—Ä–∏—Ä–æ–¥–Ω—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è (–∑–º–µ–Ω—à–µ–Ω—ñ –∞–º–ø–ª—ñ—Ç—É–¥–∏)
    applyNaturalVariation(current, baseline, amplitude) {
        const returnForce = (baseline - current) * 0.02; // –©–µ —Å–ª–∞–±—à–∞ —Å–∏–ª–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        const randomVariation = (Math.random() - 0.5) * amplitude;
        
        return current + returnForce + randomVariation;
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é –∑ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏
    generateDeviceData(device, timestamp) {
        const deviceId = device.id;
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—É —è–∫–æ—Å—Ç—ñ
        this.updateQualityCycle(deviceId);
        
        // –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–æ–¥—ñ–π
        this.cleanupExpiredEvents(deviceId);
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤ —è–∫ –æ—Å–Ω–æ–≤–∏
        let trendParams = this.applyLongTermTrends(deviceId, device.baseline, timestamp);
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –£–õ–¨–¢–†–ê-–ª–µ–≥–∫–∏—Ö –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –∫–æ–ª–∏–≤–∞–Ω—å
        trendParams.ph = this.applyNaturalVariation(
            device.current.ph, 
            trendParams.ph, 
            this.variationAmplitudes.ph.normal
        );
        
        trendParams.temp = this.applyNaturalVariation(
            device.current.temp, 
            trendParams.temp, 
            this.variationAmplitudes.temp.normal
        );
        
        trendParams.tds = this.applyNaturalVariation(
            device.current.tds, 
            trendParams.tds, 
            this.variationAmplitudes.tds.normal
        );
        
        trendParams.turbidity = this.applyNaturalVariation(
            device.current.turbidity, 
            trendParams.turbidity, 
            this.variationAmplitudes.turbidity.normal
        );
        
        // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º'—è–∫–∏—Ö –∑–º—ñ–Ω —è–∫–æ—Å—Ç—ñ
        let modifiedParams = this.applyQualityDegradation(deviceId, trendParams);
        
        // –û–±–º–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —É —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –º–µ–∂–∞—Ö
        modifiedParams.ph = Math.max(0, Math.min(14, modifiedParams.ph));
        modifiedParams.temp = Math.max(0, Math.min(50, modifiedParams.temp));
        modifiedParams.tds = Math.max(0, Math.min(3000, modifiedParams.tds));
        modifiedParams.turbidity = Math.max(0, Math.min(100, modifiedParams.turbidity));
        
        // –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ —Ä–æ–∑—É–º–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        modifiedParams.ph = parseFloat(modifiedParams.ph.toFixed(2));
        modifiedParams.temp = parseFloat(modifiedParams.temp.toFixed(1));
        modifiedParams.tds = Math.floor(modifiedParams.tds);
        modifiedParams.turbidity = parseFloat(modifiedParams.turbidity.toFixed(1));
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        device.current = modifiedParams;
        device.current.lastUpdate = timestamp;
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–∑—É —è–∫–æ—Å—Ç—ñ
        device.current.qualityPhase = this.qualityCycles[deviceId].phase;
        device.current.degradationLevel = this.qualityCycles[deviceId].degradationLevel;
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        this.updateTechnicalParameters(device, timestamp);
        
        return modifiedParams;
    }
    
    cleanupExpiredEvents(deviceId) {
        const currentTime = Date.now();
        this.activeEvents[deviceId] = this.activeEvents[deviceId].filter(event => {
            return (currentTime - event.startTime) < event.duration;
        });
        this.devices[deviceId].activeEvents = this.activeEvents[deviceId];
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø—Ä–∏—Å—Ç—Ä–æ—é
    updateTechnicalParameters(device, timestamp) {
        const technical = device.technical;
        
        // –°–∏–º—É–ª—è—Ü—ñ—è –±–∞—Ç–∞—Ä–µ—ó
        if (technical.powerType === 'battery') {
            technical.batteryLevel = Math.max(0, technical.batteryLevel - 0.1);
            
            if (technical.batteryLevel < 20 && technical.batteryLevel > 15) {
                this.addAlert(device, {
                    type: "battery_critical",
                    severity: "critical", 
                    message: "–ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó",
                    timestamp: timestamp
                });
            }
        } else if (technical.powerType === 'solar') {
            const hour = new Date(timestamp).getHours();
            if (hour >= 6 && hour <= 18) {
                technical.batteryLevel = Math.min(100, technical.batteryLevel + 0.2);
            } else {
                technical.batteryLevel = Math.max(0, technical.batteryLevel - 0.05);
            }
        }
        
        // –°–∏–º—É–ª—è—Ü—ñ—è —Å–∏–≥–Ω–∞–ª—É
        technical.signalStrength += (Math.random() - 0.5) * 5;
        technical.signalStrength = Math.max(-90, Math.min(-20, technical.signalStrength));
        
        if (technical.signalStrength > -50) {
            technical.connectionStatus = "–°—Ç–∞–±—ñ–ª—å–Ω–µ";
        } else if (technical.signalStrength > -70) {
            technical.connectionStatus = "–ü–æ–º—ñ—Ä–Ω–µ";
        } else {
            technical.connectionStatus = "–°–ª–∞–±–∫–µ";
        }
        
        // –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é 333003
        if (device.id === '333003') {
            const offlineChance = Math.random();
            if (offlineChance < 0.02) {
                device.isOnline = false;
                technical.connectionStatus = "–í—ñ–¥–∫–ª—é—á–µ–Ω–æ";
                this.addAlert(device, {
                    type: "connection_lost",
                    severity: "error",
                    message: "–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º –≤—Ç—Ä–∞—á–µ–Ω–æ",
                    timestamp: timestamp
                });
            } else if (!device.isOnline && offlineChance > 0.95) {
                device.isOnline = true;
                technical.connectionStatus = "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ";
            }
        }
        
        // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —è–∫—ñ—Å—Ç—å –≤–æ–¥–∏
        const degradationLevel = this.qualityCycles[device.id].degradationLevel;
        if (degradationLevel > 0.7) {
            this.addAlert(device, {
                type: "water_quality_critical",
                severity: "critical",
                message: `–ö—Ä–∏—Ç–∏—á–Ω–µ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏ (${(degradationLevel * 100).toFixed(1)}%)`,
                timestamp: timestamp
            });
        } else if (degradationLevel > 0.4) {
            this.addAlert(device, {
                type: "water_quality_warning",
                severity: "warning", 
                message: `–ü–æ–º—ñ—Ä–Ω–µ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≤–æ–¥–∏ (${(degradationLevel * 100).toFixed(1)}%)`,
                timestamp: timestamp
            });
        }
    }
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    addAlert(device, alertData) {
        const existingAlert = device.technical.alerts.find(alert => alert.type === alertData.type);
        if (!existingAlert) {
            device.technical.alerts.push({
                id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                acknowledged: false,
                ...alertData
            });
            
            if (device.technical.alerts.length > 8) {
                device.technical.alerts = device.technical.alerts.slice(-8);
            }
        }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —è–∫–æ—Å—Ç—ñ –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é
    getQualityStatus(deviceId) {
        const cycle = this.qualityCycles[deviceId];
        if (!cycle) return null;
        
        return {
            phase: cycle.phase,
            degradationLevel: cycle.degradationLevel,
            phaseDescription: this.getPhaseDescription(cycle.phase),
            timeInCurrentPhase: Date.now() - cycle.phaseStartTime
        };
    }
    
    getPhaseDescription(phase) {
        const descriptions = {
            'stable': '–°—Ç–∞–±—ñ–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –≤–æ–¥–∏',
            'slow_degrading': '–ü–æ–≤—ñ–ª—å–Ω–µ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ',
            'slow_recovering': '–ü–æ–≤—ñ–ª—å–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ'
        };
        return descriptions[phase] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω';
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    getAllDeviceData() {
        return this.devices;
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
    getDeviceData(deviceId) {
        return this.devices[deviceId] || null;
    }
    
    // –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –¥–∞—Ç—á–∏–∫—ñ–≤ –∑ —Å–∫–∏–¥–∞–Ω–Ω—è–º —Ü–∏–∫–ª—É
    calibrateDevice(deviceId) {
        const device = this.devices[deviceId];
        if (!device) return false;
        
        device.technical.lastCalibration = Date.now();
        device.technical.sensorStatus = "–í—Å—ñ –¥–∞—Ç—á–∏–∫–∏ –æ–Ω–ª–∞–π–Ω";
        
        device.technical.alerts = device.technical.alerts.filter(alert => 
            !alert.type.includes('calibration') && !alert.type.includes('water_quality')
        );
        
        // –°–∫–∏–¥–∞–Ω–Ω—è –¥–æ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        device.current = { ...device.baseline, lastUpdate: Date.now(), wqi: 0 };
        this.qualityCycles[deviceId] = {
            phase: 'stable',
            phaseStartTime: Date.now(),
            degradationLevel: 0,
            targetDegradation: 0,
            changeRate: 0.0005,
            lastQualityChange: Date.now()
        };
        
        // –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–¥—ñ–π
        this.activeEvents[deviceId] = [];
        
        console.log(`üîß –ü—Ä–∏—Å—Ç—Ä—ñ–π ${deviceId} –≤—ñ–¥–∫–∞–ª—ñ–±—Ä–æ–≤–∞–Ω–æ —Ç–∞ —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É`);
        return true;
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EnhancedWaterSimulation;
} else {
    this.EnhancedWaterSimulation = EnhancedWaterSimulation;
}